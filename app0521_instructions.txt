These are the steps I followed in creating the final app

================================================================================
Created new app 
* rails new app0521 --skip-test-unit -d postgresql
* config/database.yml
changed the name to mam and pw to te****** (the usual)
* added gem annotate
*initialized git
================================================================================
copying data from old app to this one
*created a scaffold called TempListing 
*added line to connect to the other app's postgresql db and extract temp_listings from there.
The number is 6496 listings
They all have latitude and longitude.
Then added the columns I want to create to hold the data coming over to the migration file
Once the db was created, I coipied all listings over from temp_listings to listings.

================================================================================
Git
Then I create a git repository, removed the public/index.html file, removed the readme etc.
================================================================================
Devise
added the devise gem to the app,
checked that it worked
================================================================================
added the taps gem for db management on heroku

================================================================================
Heroku
created a heroku instance
pushed my app up
pushed the db up
tried to launch the website
with heroku opn
got error
ran heroku restart
ran heroku open again
it worked
================================================================================
security loophole
although i removed the signup button,
users can still access the signup page through the url
This problem has been resolved in every browser except opera
added this to the application controller

def set_no_cache
    response.headers["Pragma"] = "no-cache"
    response.headers["Cache-Control"] = "no-cache, private, max-stale=0, post-check=0, pre-check=0, no-store, max-age=0, must-revalidate"
    response.headers["Expires"] = "Fri, 01 Jan 1990 00:00:00 GMT"
    response.headers["Vary"] = "*"
  end
  
Browser caching and access to log-in only pages when hitting back button 
So when someone logs in and then logs out and hts the back button, currently after
logging out the user has access to the information which only a logged in user can caccess
how to prevent this?
http://stackoverflow.com/questions/4120289/how-to-clear-browser-cache-after-user-logout-to-prevent-access-to-private-info-v

http://stackoverflow.com/questions/711418/how-to-prevent-browser-page-caching-in-rails

https://www.owasp.org/index.php/Testing_for_Logout_and_Browser_Cache_Management_(OWASP-AT-007)

Basically the program has to instruct the browser to not cache. This is done by setting the response headers which use certain HTTP codes
==============================================================================
Procfile to change production server to Thin
In order that the production mode runs a thin server rather than webrick I created a procfile and added code to it.
per this post:
http://stackoverflow.com/questions/10237200/heroku-rails-procfile

According to the railscast:
its best to install the foreman gem to check that your procfile is accurate

add gem 'Thin' to your gemfile

run foreman check comand at the command line to check if the profile is valid.
restart the server and you will see it runs thin instead of webrick
==============================================================================
CanCan & Rolify
add gem 'cancan'
bundle install
rails g cancan:ability

open models/ability.rb
 
With Devise, we can have a full stack solution for both User and Admin. But that only works if User and Admin does not need to share a lot of responsibilities.
For instance, if you are working on a blogging system with different roles as “editor”, “author” and “contributor”, but they all share a lot of activities in common, as writing a post, handling such roles with Devise can add a great of complexity to your code, mainly because you will need to use Single Table Inheritance (STI) and/or polymorphic relationships very frequently.

Devise is not good for multiroles. So I will be using Rolify
After installing Devise as above proceed to install and set up Rolify

follow instructions as laid out here
http://railsapps.github.com/tutorial-rails-bootstrap-devise-cancan.html

then to every user in the users table I added a role lie this at the ruby console
user1 = User.find(1)
user1.add_role :admin

==============================================================================
paperclip
changed the _form.html.erb helper method to add "multipart" to facilitate image upload
installed gems for paperclip and also installed imagemagick on my computer with 
"brew install imagemagick"
then ran a command on the termninal whch is an imagemagick command to determine the path to image magick: "which convert" this returns a path
 then added to the path to config/environments/development.rb file this line
"Paperclip.options[:command_path] = "/usr/local/bin/"
then follow the instructions here:
http://rdoc.info/gems/paperclip

paperclip is working however the images are being stored within the file system
EDIT: trying to solve the problem:
Let the listings upload an image and then the image metadata gets stored in its own database while the imaage gets stored on Amazon Webservices
- create Image model in Heroku to store all the iage metadata
http://stackoverflow.com/questions/10763151/uploading-image-with-papercliprails-how-to-save-the-image-to-a-different-model
================================================================================
save images on db  in Heroku or Amazon S3?
Save image attributes in Heroku but the actual images in amazon


================================================================================
Amazon web services
created an account,
created a bucket for this app : bmc-app0521-assets
entered the information on the account key and secret value in the heroku console

In order to save images on amazon s3, I looked at the instructions here
https://devcenter.heroku.com/articles/s3#ruby-plugins
and added this to the listings model
 has_attached_file :image,
    :storage => :s3,
    :bucket => ENV['S3_BUCKET_NAME'],
    :s3_credentials => {
      :access_key_id => ENV['AWS_ACCESS_KEY_ID'],
      :secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']
    }

================================================================================
Datatables
The listings table had 6500+ listings on it. These were too many to render all at once. So what I needed to do was to 
change the table so that only a few listings were rendered when the table loaded.
For this I used the datatables gem along with will_paginate

Here is the link to it:
http://railscasts.com/episodes/340-datatables?autoplay=true
https://github.com/rweng/jquery-datatables-rails

Also what I noticed was this will not work if there is a form inside the table. In order for this to work I had to take the form out of the table
So I can only have read only values of the booleans in the data table
For now this problem can be solved when the user clicks on the individual listing and checks or unchecks the columns there.

Converting the table from load all at once to load on demand using JSON:
After removing the checkboxes I also noticed that the edit_url was not working in the index page within the tables. It seems that all the post variables are not active in datatables, they instead get converted into a get request. Ive posted this on Stackoverflow and datatables.net and Im awaiting a resposne.

latency problem has been solved!! by taking this code out of the index.html.erb
<% @listings.each do |listing| %>
  	<tr >
  	
  	<td><%=listing.id%></td>
    <td><%=link_to listing.name, edit_listing_path(listing) %></td>
    <td><%=listing.telephone%></td>
    <td><%=listing.fax%></td>
    <td><%=listing.suite%></td>
    <td><%=listing.address%></td>
    <td><%=listing.city%></td>
    <td><%=listing.province%></td>
    <td><%=listing.postal_code%></td>
    <td><%=listing.latitude%></td>
    <td><%=listing.longitude%></td>
    <td><%=listing.businessType%></td>
    <td><%=listing.subType%></td>
    <td><%=listing.owner%></td>
    <td><%=listing.source%></td>
    <td><%=listing.localArea%></td>
     
    
	<td class = "input_vars" id= "keep"><%= check_box_tag(:keep) %><%= label_tag(:keep, "keep") %></td>
	<td class = "input_vars" id= "checked"><%= check_box_tag(:checked) %><%= label_tag(:checked, "checked") %></td>
	<td class = "input_vars" id= "collected"><%= check_box_tag(:menu_collected) %><%= label_tag(:menu_collected, "collected") %></td>
	<td class = "input_vars" id= "digitized"><%= check_box_tag(:menu_digitized) %><%= label_tag(:menu_digitized, "digitized") %></td>
	<td class = "input_vars" id= "in_database"><%= check_box_tag(:menu_in_database) %> <%= label_tag(:menu_in_database, "in database") %></td>
    
    
  	</tr>
	<% end %>

Once we go for the JSON response, we dont need to loop through the html file


================================================================================
Geocoder Gem
install gem 
gem 'geocoder'

========================================================================
Google Maps 
created a new function in listings_controller.rb called geoView
Changed the routes file to accomodate this route.
Created "geoView.html.erb"
Then copied contents of railsWS/cmdLine/Business/listings/list.html.erb to this view

Also copied the Map.js.erb file from there and into listings.js.erb
Added the CSS from there to listings.css.scss

A few adjustments had to be made to make this work in development. Added to application.html.erb
html {
	height: 100%
}
body {
	height: 100%;
	text-align: center;
	margin-left: auto;
	margin-right: auto;
}
without these lines the google maps did not show up.
wrapped the google mpas addDomlistener like  this to listings.js.erb:
$(window).load(function()
{
	google.maps.event.addDomListener(window, 'load', initialize);	
}

Had problems when this was uploaded to Heroku so 
changed config/environments/production.rb

Line #18 from 
config.assets.compile = false
to
config.assets.compile = true


========================================================================








error causing line from index.html.erb for listings
<!--<%= form_for :listing, :url => { :controller => "listings", :action => 'update' }, :remote => true do |l|%>-->
 <% l.submit "update"%>
      <!--<%end%>-->





table, th, td 
{
  border: 1px solid black;
  //table-layout: fixed;
  //width:90px;
  font-size:90%;
  
}
table td
{
  //background-color:#FFFF00;
}


.datatable
{
  background-color:#CCFFCC;
}

.set_state
{
  background-color:#FFFF00;
}

.datatable #heading
{
  background-color:#A9A9A9;
  
}

.datatable #body
{
  text-align: left;
}

========================================================================================================================================================
	<% @postListing = listing %>
 	
 		<%= form_for listing do |f| %> 	
    	<td class="set_state" id="keep"><%= f.check_box :keep %>
    	<%= f.label :keep, "Keep Listing" %>
    	</td>
    	<td class="set_state" id="checked"><%= f.check_box :checked %></br>
    	<%= f.label :checked, "Listing checked" %>
    	</td>
    	<td class="set_state" id="menu_collected"><%= f.check_box :menu_collected %></br>
    	<%= f.label :collected, "Menu collected" %>
    	</td>
    	<td class="set_state" id="menu_digitized"><%= f.check_box :menu_digitized %></br>
    	<%= f.label :digitized, "Menu digitized" %>
    	</td>
    	<td class="set_state" id="menu_in_db"><%= f.check_box :menu_in_database  %></br>
    	<%= f.label :database, "menu database" %>
    	</td>
    	<td class="set_state"id="listing_state_submit"><%= f.submit "update" %></br>
    	</td>
     	<% end %>


<!--<td><%=listing.keep%></td>
  	<td><%=listing.checked %></td>
  	<td><%=listing.menu_collected %></td>
  	<td><%=listing.menu_digitized %></td>
  	<td><%=listing.menu_in_database %></td>-->
  	
  		
	
