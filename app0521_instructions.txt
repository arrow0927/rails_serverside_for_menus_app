These are the steps I followed in creating the final app

================================================================================
Created new app 
* rails new app0521 --skip-test-unit -d postgresql
* config/database.yml
changed the name to mam and pw to te****** (the usual)
* added gem annotate
*initialized git
================================================================================
copying data from old app to this one
*created a scaffold called TempListing 
*added line to connect to the other app's postgresql db and extract temp_listings from there.
The number is 6496 listings
They all have latitude and longitude.
Then added the columns I want to create to hold the data coming over to the migration file
Once the db was created, I coipied all listings over from temp_listings to listings.

================================================================================
Git
Then I create a git repository, removed the public/index.html file, removed the readme etc.
================================================================================
Devise
added the devise gem to the app,
checked that it worked
================================================================================
added the taps gem for db management on heroku

================================================================================
Heroku
created a heroku instance
pushed my app up
pushed the db up
tried to launch the website
with heroku opn
got error
ran heroku restart
ran heroku open again
it worked
================================================================================
security loophole
although i removed the signup button,
users can still access the signup page through the url
THIS PROBLEM NEEDS TO BE SOLVED YET
Solved this by adding 

==============================================================================
Procfile to change production server to Thin
In order that the production mode runs a thin server rather than webrick I created a procfile and added code to it.
per this post:
http://stackoverflow.com/questions/10237200/heroku-rails-procfile

According to the railscast:
its best to install the foreman gem to check that your procfile is accurate

add gem 'Thin' to your gemfile

run foreman check comand at the command line to check if the profile is valid.
restart the server and you will see it runs thin instead of webrick
==============================================================================
creating roles in the app for various players

With Devise, we can have a full stack solution for both User and Admin. But that only works if User and Admin does not need to share a lot of responsibilities.
For instance, if you are working on a blogging system with different roles as “editor”, “author” and “contributor”, but they all share a lot of activities in common, as writing a post, handling such roles with Devise can add a great of complexity to your code, mainly because you will need to use Single Table Inheritance (STI) and/or polymorphic relationships very frequently.

Devise is not good for multiroles
==============================================================================
Browser caching and access to log-in only pages when hitting back button 
So when someone logs in and then logs out and hts the back button, currently after
logging out the user has access to the information which only a logged in user can caccess
how to prevent this?
http://stackoverflow.com/questions/4120289/how-to-clear-browser-cache-after-user-logout-to-prevent-access-to-private-info-v

http://stackoverflow.com/questions/711418/how-to-prevent-browser-page-caching-in-rails

https://www.owasp.org/index.php/Testing_for_Logout_and_Browser_Cache_Management_(OWASP-AT-007)

Basically the program has to instruct the browser to not cache. This is done by setting the response headers which use certain HTTP codes

================================================================================

paperclip
changed the _form.html.erb helper method to add "multipart" to facilitate image upload
installed gems for paperclip and also installed imagemagick on my computer with 
"brew install imagemagick"
then ran a command on the termninal whch is an imagemagick command to determine the path to image magick: "which convert" this returns a path
 then added to the path to config/environments/development.rb file this line
"Paperclip.options[:command_path] = "/usr/local/bin/"
then follow the instructions here:
http://rdoc.info/gems/paperclip

paperclip is working however the images are being stored within the file system
EDIT: trying to solve the problem:
Let the listings upload an image and then the image metadata gets stored in its own database while the imaage gets stored on Amazon Webservices
- create Image model in Heroku to store all the iage metadata
http://stackoverflow.com/questions/10763151/uploading-image-with-papercliprails-how-to-save-the-image-to-a-different-model
================================================================================
save images on db  in Heroku or Amazon S3?


================================================================================
Amazon web services
created an account,
created a bucket for this app : bmc-app0521-assets
entered the information on the account key and secret value in the heroku console

In order to save images on amazon s3, I looked at the instructions here
https://devcenter.heroku.com/articles/s3#ruby-plugins
and added this to the listings model
 has_attached_file :image,
    :storage => :s3,
    :bucket => ENV['S3_BUCKET_NAME'],
    :s3_credentials => {
      :access_key_id => ENV['AWS_ACCESS_KEY_ID'],
      :secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']
    }

================================================================================


